2018.03.06

1. python 설치
	- python.org 설치
	- 상단의 Downloads 메뉴에 마우스 커서 놓기
	- 3.0 이상의 python 설치 파일 다운 (18.03.06 기준 Windows latest release version : Python 3.6.4)
	- 설치 파일 실행
	- 설치 시 환경 변수 체크
3. sublimetext 3 설치
	- https://www.sublimetext.com/3 들어가서 sublimetext3 download
4. python 주석처리
	- 코드 앞에 '#' 붙이기
5. sublime 전체 주석 단축키 : Ctrl + /
6. 이전 명령 재실행
	- Command Palette : Ctrl + Shift + P

1. Python 기본

Python
- 컴파일 없이 실행 가능한 스크립트 언어
- 인터프리터 사용
(컴파일 : 어떤 언어의 코드를 다른 언어로 변환)
원시 언어(고급 언어) -> 목적 언어(저급 언어, 기계어)

	# 컴파일러와 인터프리터
	컴파일러
	> 프로그램 단위 번역
	> 번역 속도 느림
	> 실행 속도 빠름
	> 큰 메모리 필요 - 메모리 부족 에러

	인터프리터
	> 명령 줄 단위 번역
	> 번역 속도 빠름
	> 실행 속도 느림
	> 적은 메모리 필요

(1-1.py)
	print("Hello World!")	#test code

=================================================================================================================================

2018.03.13

2. Python 기초문법

# 자료형

> 데이터를 변수에 담는 순간 자료형이 정해짐
> 자료형마다 연산을 지원 

# 출력
>>> a=1
>>> a
1
>>> print(a)
1
>>> print(a,"test")
1test

# 연산자

정수와 실수의 연산 => 실수
음수를 나누었을 때 나머지가 있는 경우
ex) -11 // 2 => -6 (-1이 추가된 값)

# 문자열 선언 방법

> a="asdf"		// "" 포함
> a='asdf'		// '' 포함
> a='''asdf'''
> a="""asdf"""

요즘 기능이 좋아졌으니 그냥 """~~~"""로 묶어도 충분히 문자열이 내가 원하는대로 따옴표도 잘 표시되고 개행도 그냥 하면 되고 탭도 잘먹혀서 저장됨
(탭: Ctrl + TAB)

# 인덱싱

> 문자열에서 특정 문자를 가리키는 것을 의미
> 인덱스값은 0부터 시작
> 배열처럼 생각

	ex)
	>>> a="2018-03-13"
	>>> print(a[0])
	2

# 슬라이싱

> 문자열에서 특정 문자열을 자르는 것
	ex)
	>>> a="2018-03-13"
	>>> print(a[2:7])
	18-03
	
	>>> print(a[:7])
	2018-03
	
	>>> print(a[5:])
	03-13


# 리스트

> 배열과 비슷한 개념.


	>>> a=[0, 123, "aaa",111, 1.1]
	>>> a
	[0, 123, 'aaa', 111, 1.1]
	>>> print(a[2:])
	['aaa', 111, 1.1]
	>>> print(a[1]," and",a[3:5])
	123  and [111, 1.1]


# 딕셔너리

> 대응 관계를 나타낼 수 있는 자료형
> key와 value가 연결된 자료형
> 사전과 비슷함
> 딕셔너리 자체의 연산은 없음
> 인덱싱 O, 슬라이싱 X

	ex)
	>>> dic={'1':'aaaa','2':'bbbb','3':'cccc'}
	>>> dic
	{'1': 'aaaa', '2': 'bbbb', '3': 'cccc'}

	>>> dic['1']
	'aaaa'


3. Python 함수


# 리스트 함수

@ count(x)
리스트 내에 x의 개수를 반환

@ index
찾고자 하는 내용이 없으면 error 출력

@ find
찾고자 하는 내용이 없으면 -1 출력

@ join
리스트를 문자열로 반환
	ex)
	>>> a='.'
	>>> r=a.join("DSM")
	>>> print(r)
	D.S.M



# 문자열 함수

@ upper
> 소문자를 대문자로 변환

@ lower
> 대문자를 소문자로 변환

@ replace
> 문자열 바꾸기
	ex)
	>>> a="aabbcc"
	>>> a.replace("bb","dd")
	'aaddcc'

@ split
> 문자열 나누기
	ex)
	>>> a = "Life is too short"
	>>> a.split()
	['Life', 'is', 'too', 'short']
	>>> a = "a:b:c:d"
	>>> a.split(':')
	['a', 'b', 'c', 'd']

@ strip
> 양쪽 공백 지우기
	ex)
	>>> a=" asdf "
	>>> a.strip
	'asdf'

@ lstrip
> 왼쪽 공백 지우기

@ rstrip
> 오른쪽 공백 지우기



# 내장 함수

@ type
> 자료형 반환
	ex)
	>>> a="DSM"
	>>> type(a)
	<class 'str'>

@ int
> 문자열 형태의 소수점이 있는 숫자 등을 정수 형태로 반환
> 정수를 입력으로 넣으면 그대로 반환
	ex)
	>>> int(3)
	3
	>>> int(3.141592653589793238462643383279)
	3

@ str
> 문자열 형태로 객체를 변환하여 반환
	ex)
	>>> str(555)
	'555'

@ ord
> 문자의 아스키 코드값 반환

@ chr
> 아스키 코드값에 해당하는 문자 반환

=========================================================================================================================================



2018.03.27

python 코드축약
python 제어구조
python 문제풀기


++++++
(3-1.py)
# count
a = 'programming'
res = a.count('m')
print(res)

# count 함수가 메소드로 지정된 변수의 문자열에서
# count 함수 인자(문자)의 개수를 변환한다.
# 만약 a에 숫자를 담고 count에 숫자 인자를 넣으면?
# -> 불가능하다. 이유는 문자열 함수이기 때문.
# -> 그래도 숫자를 넣고 싶다면 따옴표를 붙인다.
++++++

++++++

(3-2.py)
# find
a = 'programming'
res = a.find('m')
print(res)

# find 함수가 메소드로 지정된 변수의 문자열에서 find함수 인자(문자)의 인덱스를 반환한다.
# 만약 찾는 문자가 없다면 -1 반환

++++++

++++++

(3-3.py)
# index
a = 'programming'
res = a.index('m')
print(res)

++++++

++++++

(3-4.py)
# join
a = '_m-_-m_'
res = a.join('ABC')
print(res)

# join 함수가 메소드로 지정된 변수의 문자를 find함수의 인자(문자) 사이에 삽입한다.
# 숫자 안됨, 굳이 하고 싶다면 따옴표 쓰기.
# 한 줄씩 띄우게 하고 싶을땐?
# -> \n, \t와 같은 escape 문자 넣기.

ab = [1,'asdf',123, 'ssfa']
print(ab[2:4])

print(str(ab)[1:1]) #대괄호 없애기

++++++

++++++

(3-5.py)
# upper, lower
a = 'karKat VanTaS'
res = a.upper()
res1 = a.lower()
print(res,"\t",res1)

# 대문자, 소문자로 변환

++++++

++++++

(3-6.py)
#replace
a = '프로 그래머'
res = a.replace(' ', '1')
print(res)

# 문자열을 치환한 결과를 반환한다.
# 공백으로부터 치환이 가능하다 >>> replace('','1')
# 없는 문자열은 치환 불가능함

++++++

++++++

(3-7.py)
#split

a = 'a1p1p1l1e'
res = a.split('1')
print(res[0],res[1],res[2],res[3],res[4])

#문자열을 나눈 결과를 반환함
#result is list type
#a='a1p1p1l1e'

++++++

++++++

(3-8.py)
#lstrip, rstrip
a='     programming'
b='programming   '
c='   programming    '
res=a.lstrip()
print(res, 1)	# 왼쪽 공백만 제거되었는지 확인
res=b.rstrip()
print(res, 1)	# 오른쪽 공백만 제거되었는지 확인
res=c.strip()
print(1, res, 1)

a='programming'
res=type(a)
print(res)
++++++

++++++

(3-9.py)
#str
a=123
print(a*10)
res=str(a)
print(res*10)

#int
a='123'
res=int(a)
print(res*10.0)
#문자로 표현된 숫자를 정수형으로 바꿈
#순수 문자는 정수로 못바꿈
#당연히 계산도 가능함

#ord
a = 'A'
res = ord(a)
print(res)
#문자를 아스키코드(정수)로 바꾼다

#chr
a = 68
res = chr(a//2)
print(res)
#정수에 해당하는 아스키코드 문자를 반환한다.
#n=34, chr(n*2) >> 가능
#68/2는 안됨 > 자료형이 float로 된다
# // 로 하면 나누기도 됨

++++++

++++++

(3-10.py)
#append
a = [1,2,3]
a.append(4)
print(a)
#append의 인자를 문자열 뒤에 추가한다.

#sort
res1=['e','a','h']
res2=[1,6,2]
res1.sort()
res2.sort(reverse = True)	# True라고 정확히 입력해야 함
res3 = sorted(res1, reverse = True)
res4 = sorted(res1)			# 외부정렬
print(res1)
print(res2)
print(res3)
print(res4)
#sorted는 딕셔너리 정렬이 가능.
a={'2':'B','1':'A','3':'U'}
a1=sorted(a)
print(a1)


#insert
res=[100,123,523]
res.insert(1,2)
print(res)
#특정 인덱스의 값이 되도록 요소를 추가한다.

#remove
res=[10,20,30,40,10]
res.remove(10)
print(res)
#함수의 인자값을 찾아서 삭제한다.
#값이 여러개면 가장 첫번째 요소를 삭제한다.

#top
res = [10,20,30,40]
res.pop()					# 반환값이 있는 함수이다
print(res)
#마지막 요소를 삭제하는 함수
#반환값이 있으므로 변수에 pop한 값을 저장할 수 있음

#count
a = [10,10,101,102,10,'ab']
res = a.count(10)
print(res)
#함수의 인자값을 찾아서 개수를 센다.
#내부의 계산값을 넣어도 될까? res=a.count(5+5) ==> 가능

#==========================================================================================================================

#딕셔너리 함수

#keys
a = {'a':123,'b':456}
res = a.keys()
print(res)
#dictionary의 key들을 반환한다.

#values
res = a.values()
print(res)

res = a.items()
print(res)

#diction... 어쩌구 말을 없애려면 list활용

#get
a = {'q':123,'w':456}
res=a.get('q')
print(a['q'])
print(res)
# 둘의 차이는? 키가 없는 값을 반환한다면?
# get함수를 쓸때 키가 없는 값을 찾으면 none
# 그냥 딕셔너리에서 키 값으로 찾았을 때 없으면 오류
# get 함수는 키값이 있다면 그 vlaue를 반환하도
# 없다면 기본값을 저장하여 반환할 수 있다.

#in
a = {'q':123,'w':456}
print('q' in a)
# 키 값이 있는지 검사.
# 있으면 True, 없으면 False
# 이 결과를 가지고 if(~~ == True) << 와 같이 응용할 수 있음

++++++



++++++

(4-1.py)

#1

a = input()
b = input()
a = int(a)
b = int(b)
print(a + b)
print(a - b)
print(a * b)
print("%.2f" %(a / b))	# formatting C언어랑 다른 점은 % 붙인다는 것
print(int(a / b))
print(a % b)


#2

a,b = input().split()		# 한 줄 입력이 가능해진다
a = int(a)
b = int(b)
print(a + b)
print(a - b)
print(a * b)
print("%.2f" %(a / b))
print(int(a / b))
print(a % b)


#3
a,b = map(int, input().split())		# 입력을 받아서 각 변수에 정수로 mapping
print(a + b)
print(a - b)
print(a * b)
print("%.2f" %(a / b))
print(int(a / b))
print(a % b)

#4
a,b = map(int, input().split())
print(a+b, a-b, a*b, "%.2f" %(a/b), a//b, a%b, sep='\n')

++++++
++++++

(4-2.py)
#_*_ coding:utf-8 _*_
"""age = input("나이를 입력하세요 : ")
if int(age) >= 20:	#괄호 써도되고 안 써도 됨
	print("Party tonight")
else:
	print("Study tonight")
 """


# python의 코드 구분은 들여쓰기로 수행된다.
# 함수, 조건, 반복 구조 등 내포가 필요한 구문은 콜론:으로 구분한다.

age = input("나이를 입력하세요 : ")
print ("party tonight" if int(age) >= 20 else "Study tonight")

# 삼항연산자
# format : 명령문 if 조건 else 거짓일때의 명령문

++++++

키보드를 사용하여 두 정수를 입력하면 덧셈, 뺄셈, 곱셈, 나눗셈, 몫, 나머지가 출력되는 계산기 프로그램을 작성하시오.

입력 예시	30 8

출력 예시	38
		22
		240
		3.75
		3
		6



문제 작성
ㅣ
문제해결 논리 의한 정상 코드
ㅣ
파이썬 기능을 활용하여여 축약 코드 제시

제어구조

2) a라는 변수에 아무 입력이나 계속 받고(숫자 / 문자) a가 1이 아닐 경우 This is not one 출력
a가 1일때는 "The end" 출력

++++++

(4-3.py)
while True:
	a=input("input a : ")
	if a=='1' and int(a)==1:
		print("The end")
		break
	else:
		print("This is not one")
++++++

for를 활용한 구구단 출력
for를 리스트에 내포하기

++++++

(4-4.py)
for x in range(2, 10):
    for y in range(1, 10):
        print(x, "*", y, "=", x*y, "\t")

++++++



==================================================================================================================================

2018.04.10


Problem Solving 문제 해결

- 추상화  : 문제 분해, 핵심 요소 추출

		 - 현재상태 정의
		 - 목표상태 정의
		 - 문제 분해
		 - 핵심요소 (조건) 추출

- 알고리즘 : 절차적 사고 표현

		 - 0개 이상의 입력
		 - 1개 이상의 결과
		 - 명확성 / 유한성 / 실행 가능성

- 자동화  : 프로그래밍 (코딩)


# 추상화

1
현재상태 : 탑이 모두 A기둥이 있음
목표상태 : 탑이 모두 C기둥에 있음
문제분해 : ?
핵심요소 : ?

2
현재상태 : 탑이 모두 A기둥이 있음
목표상태 : 제일 큰 원판이 A기둥에 있고 나머지 원판이 B기둥에 있음
문제분해 : 위 과정이 문제 분해임
핵심요소 : 제일 큰 원판 -> n
		나머지 원판 -> 1 ~ n-1

3
현재상태 : 제일 큰 원판이 A기둥에 있고, 나머지 원판들이 B기둥에 있음
목표상태 : 제일 큰 원판이 C기둥에 있고, 나머지 원판들이 B기둥에 있음
문제분해 : 위의 과정이 문제 분해임
핵심요소 : 제일 큰 원판 옮기는 횟수 -> +1

4
현재상태 : 제일 큰 원판이 C기둥에 있고, 나머지 원판들이 B기둥에 있음
목표상태 : 모든 원판이 C기둥에 있음
문제분해 : 위의 과정이 문제 분해임
핵심요소 : 나머지 기둥 옮기는 횟수 -> n-1
		n-1이 1이면 종료



n개의 계단을 오를 때 한 번에 1계단 또는 2계단으로 오를 수 있는 방법의 수 구하기

현재상태 : 올라갈 계단이 1칸
목표상태 : 계단을 모두 올라감
문제분해 : 
핵심요소 : 올라가는 경우의 수 = 1개


코드표를 통한 암호해독

코드표 예시

중복되지 않은 10개의 코드를 가진 암호코드표가 주어지고,
각각의 암호 코드에는 0ㅂ부터 9까지의 숫자가 매칭된다.
암호문이 주어졌을 때 이 암호코드를 기반으로 암호문을 복호화하는 알고리즘(파이썬 코드)를 작성하시오
단, 암호문은 공백을 허용하며, 암호코드에 있는 문자만으로 암호문을 입력한다.

input1 : 암호코드표 lohcgpdabk
input2 : 암호문 cdp
출력 : 365


현재상태 : 암호문 목록(암호코드표)
목표상태 : 암호문의 문자가 암호코드ㅡ표의 코드와 매칭되었는지 확인 후 인덱스를 
문제분해 : 
핵심요소 : 암호코드표를 순차탐색하여 암호문의 문자가 있는지 확인
		없는 문자(공백)에 대해서는 동장하지 않음

==========================================================================================================================================

2018.04.24

Problem Solving 문제 해결

- 추상화  : 문제 분해, 핵심 요소 추출

		 - 현재상태 정의
		 - 목표상태 정의
		 - 문제 분해
		 - 핵심요소 (조건) 추출

- 알고리즘 : 절차적 사고 표현

		 - 0개 이상의 입력
		 - 1개 이상의 결과
		 - 명확성 / 유한성 / 실행 가능성

- 자동화  : 프로그래밍 (코딩)


# 추상화

1
현재상태 : 탑이 모두 A기둥이 있음
목표상태 : 탑이 모두 C기둥에 있음
문제분해 : ?
핵심요소 : ?

2
현재상태 : 탑이 모두 A기둥이 있음
목표상태 : 제일 큰 원판이 A기둥에 있고 나머지 원판이 B기둥에 있음
문제분해 : 위 과정이 문제 분해임
핵심요소 : 제일 큰 원판 -> n
		나머지 원판 -> 1 ~ n-1

3
현재상태 : 제일 큰 원판이 A기둥에 있고, 나머지 원판들이 B기둥에 있음
목표상태 : 제일 큰 원판이 C기둥에 있고, 나머지 원판들이 B기둥에 있음
문제분해 : 위의 과정이 문제 분해임
핵심요소 : 제일 큰 원판 옮기는 횟수 -> +1

4
현재상태 : 제일 큰 원판이 C기둥에 있고, 나머지 원판들이 B기둥에 있음
목표상태 : 모든 원판이 C기둥에 있음
문제분해 : 위의 과정이 문제 분해임
핵심요소 : 나머지 기둥 옮기는 횟수 -> n-1
		n-1이 1이면 종료



n개의 계단을 오를 때 한 번에 1계단 또는 2계단으로 오를 수 있는 방법의 수 구하기

현재상태 : 올라갈 계단이 1칸
목표상태 : 계단을 모두 올라감
문제분해 : 
핵심요소 : 올라가는 경우의 수 = 1개


코드표를 통한 암호해독

코드표 예시

중복되지 않은 10개의 코드를 가진 암호코드표가 주어지고,
각각의 암호 코드에는 0ㅂ부터 9까지의 숫자가 매칭된다.
암호문이 주어졌을 때 이 암호코드를 기반으로 암호문을 복호화하는 알고리즘(파이썬 코드)를 작성하시오
단, 암호문은 공백을 허용하며, 암호코드에 있는 문자만으로 암호문을 입력한다.

input1 : 암호코드표 lohcgpdabk
input2 : 암호문 cdp
출력 : 365


현재상태 : 암호문 목록(암호코드표)
목표상태 : 암호문의 문자가 암호코드ㅡ표의 코드와 매칭되었는지 확인 후 인덱스를 
문제분해 : 
핵심요소 : 암호코드표를 순차탐색하여 암호문의 문자가 있는지 확인
		없는 문자(공백)에 대해서는 동장하지 않음

=========================================================================================================================================

2018.04.24

1. 함수 
	정의 : 입력 값을 받아서, 특정 연산(작업)을 수행한 후에 결과를 출력하는 것

	- 입력 값을 받아서 특정 연산(작업)을 수행한 결과
	- 프로그래밍에서는 조금 다른 의미를 가지는 듯 → 결과보다는 어떤 기능을 하느냐가 더 주안점

	가. 사용자 함수
		1) 주의사항
		- 함수 호출 전까지는 함수 안의 문장들은 수행 X
		- 함수는 호출되기 전에 먼저 만들어져야 함
		- 함수는 정의 => def 함수이름(함수의 인수..):

		2) 동작과정
		- 반환을 하는지 안 하는지 생각하기
		def print_name():
		def sum(a, b):


- 사용자 함수 만들어보기

	1. 문자열을 입력받음
	2. 문자열 내에 skip이라는 단어가 있으면 'rejected' 출력
	3. 'skip이라는 단어가 없으면 그대로 출력
	4. 매 출력마다 '-'*10 출력해서 구분
	5. 사용자가 quit을 입력하여 끝낼 때까지 프로그램을 무한 반복
	==> 6-3.py

=========================================================================================================================================

2018.05.08

클래스
- 일종의 템플릿
- C 언어의 구조체와 유사

차이점
- 구조체는 변수만 담을 수 있지만 클래스는 함수까지 담을 수 있다.
- 클래스 = 변수 U 함수

형식
	class 클래스명():
		변수명=변수값
		def 함수명(self,인자..., ...)


생성
C언어의 구조채처럼 .을 써서 클래스 내부 활용

알게 된 점 : 클래스도 함수처럼 호출되기 전에는 수행되지 않는다.

self가 뭐징
일단 하나 더 만들어보자
클래스의 변수에 접근하기 위해 파이썬이 제공하는 변수
클래스 내에서 함수를 정의할 때 잊지 말고 꼭 쓰자

생성자 : 클래스 변수가 생성될 때 자동으로 호출되는 함수
		클래스 내부에 정의된 변수 등을 초기화할 때 사용 (8-2.py 참고)



이메일 보내기

필요한 설정 정보
SMTP 서버		메일을 보내는 서버	]	서버 주소
POP3 서버		메일을 받는 서버		]	포트 번호
계정 정보		ID/PW

표현 계층에 있는 MIM이라는 라이브러리를 건드려서 SMTP, POP3를 건드릴 것.

SMTP 서버
주소 : smtp.gmail.com
포트 : 587 또는 465

POP 서버
주소 : mail.google.com
포트 : xxx

[라이브러리]
email.smtplib
기본 라이브러리로 제공함
따로 설치하지 않아도 됨

라이브러리 내부
MIME : 전자우편을 위한 인터넷 표준 포맷

MIMEText
MIMEMultipart	SMTP가 사용하는 양식에 맞춰서 내용을 작성해주는 클래스


pip install openpyxl

사람이 엑셀에서
데이터가 들어있는 파일 실행
데이터가 들어있는 시트로 이동
데이터가 있는 위치의 데이터를 활용

프로그램이 엑셀에서
데이터가 들어있는 파일명으로 클래스 변수 생성
클래스 변수에서 시트 이름을 활용하여 시트 이동
데이터가 있는 위치의 데이터를 활용

==> 똑같음

===========================================================================================================================================

2018.05.30

원리

크롤링 : 
웹사이트도 결국 문서
웹브라우저 : 문서 해석 후 보여줌
브라우저 별로 내부에서 쓰는 드라이버가 있음

웹 드라이버의 역할 : 웹 문서를 분석하고 이를 활용하여 화면 구성
웹 문서를 분석하고 이를 활용하여 화면 구성
웹 문서에 이벤트를 전달하고 결과값을 받음
웹 드라이버가 제공하는 방법으로 서로 주고받아야 함

웹 드라이버를 직접 다루는 것==브라우저를 만드는 것
고로 우린 라이브러리를 활용할 것임

Selenium
일종의 서버 프로그램
라이브러리로 제공
다양한 브라우저의 웹 드라이버 컨트롤

라이브러리를 통해 웹 드라이버 컨트롤 가능


웹 자동화

1. Selenium 설치
pip install selenium
안 되면 python -m pip install --upgrade pip

2. 웹 페이지 분석


3. 코딩

3.1

try~except~finally
try 안의 코드를 수행하다가 에러가 발생하면 발생한 시점 이후의 코드는 수정하지 않고 except로 가서 코드를 수행해라
finally는 에러 여부와 상관없이 무조건 수행

===========================================================================================================================================

2018.06.12

1. 단계
- Selenium 설정
- 네이버 이동 후 분석
  검색어 창의 태그 분석
  검색어 창으로 원하는 입력 값 전송

- 검색 후 결과창 분석
- 블로그, 카페, 뉴스 등
  - 클래스 구분이 띄어쓰기인 것을 알 수 있음
  - 컨트롤에프 => .클래스명으로 고유한 값인지 확인